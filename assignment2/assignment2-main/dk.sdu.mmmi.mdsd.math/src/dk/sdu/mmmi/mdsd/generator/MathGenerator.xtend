/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.Exp
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.Primary
import dk.sdu.mmmi.mdsd.math.Number
import dk.sdu.mmmi.mdsd.math.Let
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Origen
import dk.sdu.mmmi.mdsd.math.Parenthesis
import dk.sdu.mmmi.mdsd.math.VariableUse

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static HashMap<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val origen = resource.allContents.filter(Origen).next
		val result = origen.compute
		
		// You can replace with hovering, see Bettini Chapter 8
		result.displayPanel
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(Origen origen) { 
		for (MathExp exp : origen.x){
			var localVariables = new HashMap<String, Integer>()
			localVariables.putAll(variables)
			variables.put(exp.name, exp.exp.computeExp(localVariables))
		}
		
		return variables
	}
	
	def static int computeExp(Exp exp, HashMap<String, Integer> localVariables) {
		switch exp {
			Plus: exp.left.computeExp(localVariables) +exp.right.computeExp(localVariables)
			Minus: exp.left.computeExp(localVariables) -exp.right.computeExp(localVariables)
			Mult: exp.left.computeExp(localVariables) *exp.right.computeExp(localVariables)
			Div: exp.left.computeExp(localVariables)/exp.right.computeExp(localVariables)
			Primary: exp.calPrimary(localVariables)
		}
	}
	
	def static int calPrimary(Primary exp, HashMap<String, Integer> localVariables){
		switch exp{
			Number: exp.value
			Parenthesis: exp.exp.computeExp(localVariables)
			VariableUse: exp.calVariableUse(localVariables)
			Let: {
				//localVariables.get(exp.name)
				exp.calLet(localVariables)
				}
				
			
		}
		
	}
	
	def static int calVariableUse(VariableUse exp,HashMap<String, Integer> localVariables){
		switch exp.ref {
			MathExp: {
				//localVariables.get((exp.ref as MathExp).name)
				var globalVariables = new HashMap<String,Integer>
				globalVariables.putAll(variables)
				var temp = (exp.ref as MathExp).exp.computeExp(localVariables)
				localVariables.put((exp.ref as MathExp).name, temp)
				//(exp.ref as MathExp).exp.computeExp(localVariables)
				temp
			} 
			Let: {
				
				//localVariables.get((exp.ref as Let).name)
				//(exp.ref as Let).exp.computeExp(localVariables)
				localVariables.get(exp.ref.name)
				}
		}
	}
	
	def static calLet(Let exp,HashMap<String, Integer> localVariables){
		val old = localVariables.get(exp.name)
		localVariables.put(exp.name,exp.^val.computeExp(localVariables))
		val temp = exp.exp.computeExp(localVariables)
		localVariables.put(exp.name, old)
		temp
	}
	
	def static int computePrim(Primary factor) { 
		87
	}

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}

}
